/* SINTACTICO */

/* 1. package o importaciones */
package Analizadores;
import java_cup.runtime.*;
import java.util.stream.Collectors;
import java.util.ArrayList;
import java.util.List;
import Errores.Excepcion;


/* 2. código para el parser, variables, métodos */

// PARSER
parser code
{:

    // clases, objetos, variables, listas, etc.
    public List<String> salidas = new ArrayList<String>();

    // errores
    public ArrayList<Excepcion> Errores = new ArrayList();

    // Método al que se llama automáticamente ante algún error sintáctico.
    public void syntax_error(Symbol s){ 
        Errores.add(new Excepcion("Sintáctico", "Error de sintaxis detectado. Se detectó: " + s.value, s.left + "", s.right + ""));
    } 

    // Método al que se llama automáticamente ante algún error sintáctico
    // en el que ya no es posible una recuperación de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error sintactico irrecuperable en la Linea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }

    public ArrayList<Excepcion> getErrores(){
        return Errores;
    }
:}

/* 3. terminales */
terminal String PTCOMA, PAR_IZQ, PAR_DER, LLAV_IZQ, LLAV_DER, PT, DOS_PT, COMA, S, COR_IZQ, COR_DER;
terminal String MAS, MENOS, POR, DIVISON;
terminal String ASIGNACION, ACCESO, ASIGNA;
terminal String INICIALIZACION, ARROBA;

terminal String PROGRAM;
terminal String END;

terminal String CONSOLE;
terminal String PRINT;

terminal String CADENA;
terminal String ID;
terminal String DOUBLE;
terminal String NUMERO;

terminal String VAR;
terminal String CHAR_ARRAY;
terminal String ARR;

terminal String SUM;
terminal String RES;
terminal String MUL;
terminal String DIV;
terminal String MOD;

terminal String MEDIA;
terminal String MEDIANA;
terminal String MODA;
terminal String VARIANZA;
terminal String MAX;
terminal String MIN;

terminal String COLUMN;


/* 4. No terminales */
non terminal String ini;
non terminal String declaraciones;
non terminal String declaracion;
non terminal String imprimir;
non terminal String expresion;
non terminal String expresiones;
non terminal String tipo_dato;
non terminal String declaracion_variable;
non terminal String declaracion_arreglo;
non terminal String op_aritmetica;
non terminal String operacion;
non terminal String funcion_estadistica;


/* 5. precedencias operadores */
precedence left MAS, MENOS;
precedence left POR, DIV;

/* 6. Reglas de producción para expresiones */
start with ini;

ini ::= PROGRAM declaraciones:a END PROGRAM {:RESULT = a; :}
;

declaraciones ::= declaraciones declaracion
               | declaracion
               | error {::}
;

declaracion ::= imprimir
             | declaracion_variable
             | declaracion_arreglo
             | op_aritmetica

;

imprimir ::= CONSOLE ACCESO PRINT ASIGNACION expresiones:e END PTCOMA {: RESULT = e; :}
            | CONSOLE ACCESO COLUMN ASIGNACION expresiones ASIGNA expresiones END PTCOMA
;

declaracion_variable ::= VAR DOS_PT tipo_dato:a ACCESO ID INICIALIZACION expresion:b END PTCOMA {: RESULT = a; :}
;

declaracion_arreglo ::= ARR DOS_PT tipo_dato ACCESO ARROBA ID INICIALIZACION COR_IZQ expresiones:b COR_DER END PTCOMA {: RESULT = b; :}
;

/*=========op aritmeticas=========*/
op_aritmetica ::= VAR DOS_PT ID:a DOUBLE ACCESO operacion:b END PTCOMA {: RESULT = a; :}
;

/*=========funciones estadisticas=========*/
funcion_estadistica ::= MEDIA PAR_IZQ expresion:b PAR_DER
                   | MEDIANA PAR_IZQ expresion:b PAR_DER
                   | MODA PAR_IZQ expresion:b PAR_DER
                   | VARIANZA PAR_IZQ expresion:b PAR_DER
                   | MAX PAR_IZQ expresion:b PAR_DER
                   | MIN PAR_IZQ expresion:b PAR_DER
; 

/*=========funciones graficacion=========*/



expresion ::= operacion
           | ID:a {:RESULT = a;:}
           | CADENA:str {:RESULT = str;:}
           | NUMERO:a {:RESULT = a;:}
           | PAR_IZQ expresion PAR_DER
           | funcion_estadistica
           | COR_IZQ expresiones COR_DER
           | ARROBA ID
;

expresiones ::= expresion:b
              | expresiones:b COMA expresion:e {: RESULT = b + ", " + e; :}
;



tipo_dato ::= DOUBLE:d {: RESULT = d; :}
            | CHAR_ARRAY:c {: RESULT = c; :}
;


operacion ::= SUM PAR_IZQ expresiones PAR_DER
            | RES PAR_IZQ expresiones PAR_DER
            | MUL PAR_IZQ expresiones PAR_DER
            | DIV PAR_IZQ expresiones PAR_DER
            | MOD PAR_IZQ expresiones PAR_DER
;
