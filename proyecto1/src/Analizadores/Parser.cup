/* SINTACTICO */

/* 1. package o importaciones */
package Analizadores;
import java_cup.runtime.*;
import java.util.stream.Collectors;
import java.util.ArrayList;
import java.util.List;
import Errores.Excepcion;

import Instruccion.Aritmetica;
import Instruccion.Variable;
import Instruccion.Imprimir;  
import Grafica.GraficaBarras;   
import Grafica.GraficaPie;  
import Grafica.GraficaLine;     
import Grafica.DataHistograma;                                         



/* 2. código para el parser, variables, métodos */

// PARSER
parser code
{:   

    Variable vari = new Variable();
    Aritmetica Ari = new Aritmetica();

    // Crear un ArrayList para almacenar objetos GraficaBarras
    public ArrayList<GraficaBarras> listaGraficas = new ArrayList<>();

    GraficaBarras grb = new GraficaBarras();
    GraficaPie grp = new GraficaPie();
    GraficaLine grl = new GraficaLine();
    DataHistograma dh = new DataHistograma();

    // clases, objetos, variables, listas, etc.
    public List<String> salidas = new ArrayList<String>();

    // errores
    public ArrayList<Excepcion> Errores = new ArrayList();

    // Método al que se llama automáticamente ante algún error sintáctico.
    public void syntax_error(Symbol s){ 
        Errores.add(new Excepcion("Sintáctico", "Error de sintaxis detectado. Se detectó: " + s.value, s.left + "", s.right + ""));
    } 

    // Método al que se llama automáticamente ante algún error sintáctico
    // en el que ya no es posible una recuperación de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error sintactico irrecuperable en la Linea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }

    public ArrayList<Excepcion> getErrores(){
        return Errores;
    }
:}

/* 3. terminales */
terminal String PTCOMA, PAR_IZQ, PAR_DER, LLAV_IZQ, LLAV_DER, PT, DOS_PT, COMA, S, COR_IZQ, COR_DER;
terminal String ASIGNACION, ACCESO, ASIGNA;
terminal String INICIALIZACION, ARROBA;

terminal String PROGRAM;
terminal String END;

terminal String CONSOLE;
terminal String PRINT;

terminal String CADENA;
terminal String ID;
terminal String DOUBLE;
terminal String NUMERO;

terminal String VAR;
terminal String CHAR_ARRAY;
terminal String ARR;

terminal String SUM;
terminal String RES;
terminal String MUL;
terminal String DIV;
terminal String MOD;

terminal String MEDIA;
terminal String MEDIANA;
terminal String MODA;
terminal String VARIANZA;
terminal String MAX;
terminal String MIN;

terminal String COLUMN;

terminal String BAR;
terminal String PIE;
terminal String LINE;
terminal String HISTOGRAM;

terminal String EXEC;
terminal String TITULO;
terminal String X;
terminal String Y;
terminal String TITULOX;
terminal String TITULOY;
terminal String VALUES;
terminal String LABEL;


/* 4. No terminales */
non terminal String ini;
non terminal String declaraciones;
non terminal String declaracion;
non terminal String imprimir;
non terminal String expresion;
non terminal String expresiones;
non terminal String tipo_dato;
non terminal String declaracion_variable;
non terminal String declaracion_arreglo;
non terminal String op_aritmetica;
non terminal String operacion;
non terminal String funcion_estadistica;

non terminal String funcion_graficacion;
non terminal String atributos_bar;
non terminal String atributos_line;
non terminal String atributos_pie;
non terminal String atributos_histogram;

non terminal String graficaBarras;
non terminal String graficaPie;
non terminal String graficaLine;
non terminal String datosHistogram;


/* 5. precedencias operadores */


/* 6. Reglas de producción para expresiones */
start with ini;

ini ::= PROGRAM declaraciones:a END PROGRAM {:RESULT = a; :}
;

declaraciones ::= declaraciones declaracion
            | declaracion
            | error PTCOMA {::}
;

declaracion ::= imprimir
            | declaracion_variable
            | declaracion_arreglo
            | op_aritmetica
            | funcion_graficacion
; 

imprimir ::= CONSOLE ACCESO PRINT ASIGNACION expresiones:exp END PTCOMA {: salidas.add(exp); :}
            | CONSOLE ACCESO COLUMN ASIGNACION expresiones ASIGNA expresiones END PTCOMA
;

declaracion_variable ::= VAR DOS_PT tipo_dato:a ACCESO ID:id INICIALIZACION expresion:exp END PTCOMA {: vari.asignar(id , exp);  :}
;


declaracion_arreglo ::= ARR DOS_PT tipo_dato ACCESO ARROBA ID:id INICIALIZACION COR_IZQ expresiones:exp COR_DER END PTCOMA {: vari.asignar(id , exp); :}
;

/*=========op aritmeticas=========*/
op_aritmetica ::= VAR DOS_PT ID:a DOUBLE ACCESO operacion:b END PTCOMA {: RESULT = b;  :}
;

/*=========funciones estadisticas=========*/
funcion_estadistica ::= MEDIA PAR_IZQ expresion:exp PAR_DER
                | MEDIANA     PAR_IZQ expresion:exp PAR_DER
                | MODA        PAR_IZQ expresion:exp PAR_DER
                | VARIANZA    PAR_IZQ expresion:exp PAR_DER
                | MAX         PAR_IZQ expresion:exp PAR_DER
                | MIN         PAR_IZQ expresion:exp PAR_DER
; 

/*=========expresiones=========*/
expresion ::= operacion:a                   {:RESULT = a;                         :}
        | ID:id                             {:RESULT = vari.obtener(id);          :}
        | CADENA:str                        {:RESULT = str.replace("\"", "");     :}
        | NUMERO:num                        {:RESULT = num;                       :}
        | PAR_IZQ expresion:exp PAR_DER     {:RESULT = exp;                       :}
        | funcion_estadistica:a             {:RESULT = a;                         :}
        | COR_IZQ expresiones:exp COR_DER   {:RESULT = exp;                       :}
        | ARROBA:a ID:id                    {:RESULT = vari.obtener(id);          :}
;

expresiones ::= expresion:b                   {: RESULT = b;     :}
            | expresiones:b COMA expresion:e  {: RESULT = b + " , " + e; :}
            | /* */
;


tipo_dato ::= DOUBLE:d      {: RESULT = d; :}
            | CHAR_ARRAY:c  {: RESULT = c; :}
;


operacion ::= SUM PAR_IZQ expresion:a COMA expresion:b PAR_DER {: RESULT = Ari.sumArit(a, b); :}
            | RES PAR_IZQ expresion:a COMA expresion:b PAR_DER {: RESULT = Ari.resArit(a, b); :} 
            | MUL PAR_IZQ expresion:a COMA expresion:b PAR_DER {: RESULT = Ari.mulArit(a, b); :} 
            | DIV PAR_IZQ expresion:a COMA expresion:b PAR_DER {: RESULT = Ari.divArit(a, b); :} 
            | MOD PAR_IZQ expresion:a COMA expresion:b PAR_DER {: RESULT = Ari.modArit(a, b); :} 
;

/*=========graficacion=========*/
funcion_graficacion ::= BAR     PAR_IZQ graficaBarras   EXEC BAR       END PTCOMA PAR_DER END PTCOMA {: grb.build(); System.out.println(grb.toString()); :}
                    | PIE       PAR_IZQ graficaPie      EXEC PIE       END PTCOMA PAR_DER END PTCOMA {: grp.build(); System.out.println(grp.toString()); :}
                    | LINE      PAR_IZQ graficaLine     EXEC LINE      END PTCOMA PAR_DER END PTCOMA {: grl.build(); System.out.println(grl.toString()); :}
                    | HISTOGRAM PAR_IZQ datosHistogram  EXEC HISTOGRAM END PTCOMA PAR_DER END PTCOMA {: dh.build(); salidas.add(dh.calcularFrecuencia()); :}   
;

graficaBarras ::= atributos_bar graficaBarras
            | atributos_bar 
;

graficaPie ::= atributos_pie graficaPie
            | atributos_pie
;

graficaLine ::= atributos_line graficaLine
            | atributos_line
;

datosHistogram ::= atributos_histogram datosHistogram
            | atributos_histogram
;

atributos_bar ::= TITULO ACCESO CHAR_ARRAY ASIGNACION expresion:exp END PTCOMA  {: grb.setTitulo(exp);  :}
            | TITULOX    ACCESO CHAR_ARRAY ASIGNACION expresion:exp END PTCOMA  {: grb.setTituloX(exp); :}
            | TITULOY    ACCESO CHAR_ARRAY ASIGNACION expresion:exp END PTCOMA  {: grb.setTituloY(exp); :} 
            | X          ACCESO CHAR_ARRAY ASIGNACION expresion:exp END PTCOMA  {: grb.setEjeX(exp);    :} 
            | Y          ACCESO DOUBLE     ASIGNACION expresion:exp END PTCOMA  {: grb.setEjeY(exp);    :} 
;

atributos_pie ::= TITULO ACCESO CHAR_ARRAY  ASIGNACION expresion:exp END PTCOMA  {: grp.setTitulo(exp);  :}   
            | VALUES     ACCESO DOUBLE      ASIGNACION expresion:exp END PTCOMA  {: grp.setValues(exp);  :} 
            | LABEL      ACCESO CHAR_ARRAY  ASIGNACION expresion:exp END PTCOMA  {: grp.setLabel(exp);   :} 
;

atributos_line ::= TITULO ACCESO CHAR_ARRAY ASIGNACION expresion:exp END PTCOMA     {: grl.setTitulo(exp);  :}
            | TITULOX     ACCESO CHAR_ARRAY ASIGNACION expresion:exp END PTCOMA     {: grl.setTituloX(exp); :} 
            | TITULOY     ACCESO CHAR_ARRAY ASIGNACION expresion:exp END PTCOMA     {: grl.setTituloY(exp); :}  
            | X           ACCESO CHAR_ARRAY ASIGNACION expresion:exp END PTCOMA     {: grl.setEjeX(exp);    :}   
            | Y           ACCESO DOUBLE     ASIGNACION expresion:exp END PTCOMA     {: grl.setEjeY(exp);    :} 
;

atributos_histogram ::= TITULO ACCESO CHAR_ARRAY ASIGNACION expresion:exp END PTCOMA      {: dh.setTitulo(exp);  :}
            | VALUES           ACCESO DOUBLE     ASIGNACION expresion:exp END PTCOMA      {: dh.setValues(exp);  :}
;
