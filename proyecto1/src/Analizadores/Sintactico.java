
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.stream.Collectors;
import java.util.ArrayList;
import java.util.List;
import Errores.Excepcion;
import Instruccion.Aritmetica;
import Instruccion.Estadistica;
import Instruccion.Variable;
import Instruccion.Imprimir;
import Grafica.GraficaBarras;
import Grafica.GraficaPie;
import Grafica.GraficaLine;
import Grafica.DataHistograma;
import TablaSimbolos.TablaInfo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\002\006\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\005\011\000\002\005\013\000\002" +
    "\011\013\000\002\012\016\000\002\013\012\000\002\015" +
    "\006\000\002\015\006\000\002\015\006\000\002\015\006" +
    "\000\002\015\006\000\002\015\006\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\005\000\002\006\003\000\002\006\005\000\002\006" +
    "\004\000\002\007\003\000\002\007\005\000\002\007\002" +
    "\000\002\010\003\000\002\010\003\000\002\014\006\000" +
    "\002\014\006\000\002\014\006\000\002\014\006\000\002" +
    "\014\006\000\002\016\014\000\002\016\014\000\002\016" +
    "\014\000\002\016\014\000\002\023\004\000\002\023\003" +
    "\000\002\024\004\000\002\024\003\000\002\025\004\000" +
    "\002\025\003\000\002\026\004\000\002\026\003\000\002" +
    "\017\011\000\002\017\011\000\002\017\011\000\002\017" +
    "\011\000\002\017\011\000\002\021\011\000\002\021\011" +
    "\000\002\021\011\000\002\020\011\000\002\020\011\000" +
    "\002\020\011\000\002\020\011\000\002\020\011\000\002" +
    "\022\011\000\002\022\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\004\024\005\001\002\000\004\002\u0112\001" +
    "\002\000\022\003\021\026\022\034\016\036\006\053\010" +
    "\054\024\055\023\056\011\001\002\000\004\012\u0107\001" +
    "\002\000\022\025\ufff9\026\ufff9\034\ufff9\036\ufff9\053\ufff9" +
    "\054\ufff9\055\ufff9\056\ufff9\001\002\000\004\005\331\001" +
    "\002\000\004\005\300\001\002\000\022\025\276\026\022" +
    "\034\016\036\006\053\010\054\024\055\023\056\011\001" +
    "\002\000\022\025\ufff8\026\ufff8\034\ufff8\036\ufff8\053\ufff8" +
    "\054\ufff8\055\ufff8\056\ufff8\001\002\000\022\025\ufffc\026" +
    "\ufffc\034\ufffc\036\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc" +
    "\001\002\000\022\025\ufffa\026\ufffa\034\ufffa\036\ufffa\053" +
    "\ufffa\054\ufffa\055\ufffa\056\ufffa\001\002\000\004\012\255" +
    "\001\002\000\022\025\ufffb\026\ufffb\034\ufffb\036\ufffb\053" +
    "\ufffb\054\ufffb\055\ufffb\056\ufffb\001\002\000\022\025\ufffe" +
    "\026\ufffe\034\ufffe\036\ufffe\053\ufffe\054\ufffe\055\ufffe\056" +
    "\ufffe\001\002\000\004\004\254\001\002\000\004\020\237" +
    "\001\002\000\004\005\161\001\002\000\004\005\025\001" +
    "\002\000\010\060\026\065\027\066\030\001\002\000\004" +
    "\020\153\001\002\000\004\020\145\001\002\000\004\020" +
    "\043\001\002\000\004\057\034\001\002\000\012\057\uffd3" +
    "\060\026\065\027\066\030\001\002\000\004\057\uffd4\001" +
    "\002\000\004\054\035\001\002\000\004\025\036\001\002" +
    "\000\004\004\037\001\002\000\004\006\040\001\002\000" +
    "\004\025\041\001\002\000\004\004\042\001\002\000\022" +
    "\025\uffd9\026\uffd9\034\uffd9\036\uffd9\053\uffd9\054\uffd9\055" +
    "\uffd9\056\uffd9\001\002\000\004\035\044\001\002\000\004" +
    "\017\045\001\002\000\044\005\055\015\060\023\066\030" +
    "\050\031\053\033\057\037\051\040\047\041\067\042\054" +
    "\043\046\044\065\045\062\046\071\047\063\050\064\051" +
    "\061\001\002\000\004\005\142\001\002\000\004\005\137" +
    "\001\002\000\014\006\uffea\013\uffea\016\uffea\021\uffea\025" +
    "\uffea\001\002\000\004\005\134\001\002\000\004\025\132" +
    "\001\002\000\014\006\uffeb\013\uffeb\016\uffeb\021\uffeb\025" +
    "\uffeb\001\002\000\004\005\127\001\002\000\044\005\055" +
    "\015\060\023\066\030\050\031\053\033\057\037\051\040" +
    "\047\041\067\042\054\043\046\044\065\045\062\046\071" +
    "\047\063\050\064\051\061\001\002\000\014\006\uffe7\013" +
    "\uffe7\016\uffe7\021\uffe7\025\uffe7\001\002\000\014\006\uffe9" +
    "\013\uffe9\016\uffe9\021\uffe9\025\uffe9\001\002\000\050\005" +
    "\055\013\uffe2\015\060\016\uffe2\023\066\030\050\031\053" +
    "\033\057\037\051\040\047\041\067\042\054\043\046\044" +
    "\065\045\062\046\071\047\063\050\064\051\061\001\002" +
    "\000\004\005\120\001\002\000\004\005\115\001\002\000" +
    "\004\005\112\001\002\000\004\005\107\001\002\000\004" +
    "\005\104\001\002\000\004\031\103\001\002\000\004\005" +
    "\075\001\002\000\014\006\uffec\013\uffec\016\uffec\021\uffec" +
    "\025\uffec\001\002\000\004\005\072\001\002\000\044\005" +
    "\055\015\060\023\066\030\050\031\053\033\057\037\051" +
    "\040\047\041\067\042\054\043\046\044\065\045\062\046" +
    "\071\047\063\050\064\051\061\001\002\000\004\006\074" +
    "\001\002\000\014\006\ufff0\013\ufff0\016\ufff0\021\ufff0\025" +
    "\ufff0\001\002\000\050\005\055\006\uffe2\013\uffe2\015\060" +
    "\023\066\030\050\031\053\033\057\037\051\040\047\041" +
    "\067\042\054\043\046\044\065\045\062\046\071\047\063" +
    "\050\064\051\061\001\002\000\006\006\101\013\100\001" +
    "\002\000\014\006\uffe4\013\uffe4\016\uffe4\021\uffe4\025\uffe4" +
    "\001\002\000\044\005\055\015\060\023\066\030\050\031" +
    "\053\033\057\037\051\040\047\041\067\042\054\043\046" +
    "\044\065\045\062\046\071\047\063\050\064\051\061\001" +
    "\002\000\014\006\uffdd\013\uffdd\016\uffdd\021\uffdd\025\uffdd" +
    "\001\002\000\014\006\uffe3\013\uffe3\016\uffe3\021\uffe3\025" +
    "\uffe3\001\002\000\014\006\uffe5\013\uffe5\016\uffe5\021\uffe5" +
    "\025\uffe5\001\002\000\044\005\055\015\060\023\066\030" +
    "\050\031\053\033\057\037\051\040\047\041\067\042\054" +
    "\043\046\044\065\045\062\046\071\047\063\050\064\051" +
    "\061\001\002\000\004\006\106\001\002\000\014\006\ufff2" +
    "\013\ufff2\016\ufff2\021\ufff2\025\ufff2\001\002\000\044\005" +
    "\055\015\060\023\066\030\050\031\053\033\057\037\051" +
    "\040\047\041\067\042\054\043\046\044\065\045\062\046" +
    "\071\047\063\050\064\051\061\001\002\000\004\006\111" +
    "\001\002\000\014\006\uffee\013\uffee\016\uffee\021\uffee\025" +
    "\uffee\001\002\000\044\005\055\015\060\023\066\030\050" +
    "\031\053\033\057\037\051\040\047\041\067\042\054\043" +
    "\046\044\065\045\062\046\071\047\063\050\064\051\061" +
    "\001\002\000\004\006\114\001\002\000\014\006\uffef\013" +
    "\uffef\016\uffef\021\uffef\025\uffef\001\002\000\044\005\055" +
    "\015\060\023\066\030\050\031\053\033\057\037\051\040" +
    "\047\041\067\042\054\043\046\044\065\045\062\046\071" +
    "\047\063\050\064\051\061\001\002\000\004\006\117\001" +
    "\002\000\014\006\ufff1\013\ufff1\016\ufff1\021\ufff1\025\ufff1" +
    "\001\002\000\044\005\055\015\060\023\066\030\050\031" +
    "\053\033\057\037\051\040\047\041\067\042\054\043\046" +
    "\044\065\045\062\046\071\047\063\050\064\051\061\001" +
    "\002\000\004\006\122\001\002\000\014\006\uffed\013\uffed" +
    "\016\uffed\021\uffed\025\uffed\001\002\000\006\013\100\016" +
    "\124\001\002\000\014\006\uffe6\013\uffe6\016\uffe6\021\uffe6" +
    "\025\uffe6\001\002\000\004\006\126\001\002\000\014\006" +
    "\uffe8\013\uffe8\016\uffe8\021\uffe8\025\uffe8\001\002\000\050" +
    "\005\055\006\uffe2\013\uffe2\015\060\023\066\030\050\031" +
    "\053\033\057\037\051\040\047\041\067\042\054\043\046" +
    "\044\065\045\062\046\071\047\063\050\064\051\061\001" +
    "\002\000\006\006\131\013\100\001\002\000\014\006\uffdc" +
    "\013\uffdc\016\uffdc\021\uffdc\025\uffdc\001\002\000\004\004" +
    "\133\001\002\000\012\057\uffc7\060\uffc7\065\uffc7\066\uffc7" +
    "\001\002\000\050\005\055\006\uffe2\013\uffe2\015\060\023" +
    "\066\030\050\031\053\033\057\037\051\040\047\041\067" +
    "\042\054\043\046\044\065\045\062\046\071\047\063\050" +
    "\064\051\061\001\002\000\006\006\136\013\100\001\002" +
    "\000\014\006\uffdf\013\uffdf\016\uffdf\021\uffdf\025\uffdf\001" +
    "\002\000\050\005\055\006\uffe2\013\uffe2\015\060\023\066" +
    "\030\050\031\053\033\057\037\051\040\047\041\067\042" +
    "\054\043\046\044\065\045\062\046\071\047\063\050\064" +
    "\051\061\001\002\000\006\006\141\013\100\001\002\000" +
    "\014\006\uffde\013\uffde\016\uffde\021\uffde\025\uffde\001\002" +
    "\000\050\005\055\006\uffe2\013\uffe2\015\060\023\066\030" +
    "\050\031\053\033\057\037\051\040\047\041\067\042\054" +
    "\043\046\044\065\045\062\046\071\047\063\050\064\051" +
    "\061\001\002\000\006\006\144\013\100\001\002\000\014" +
    "\006\uffdb\013\uffdb\016\uffdb\021\uffdb\025\uffdb\001\002\000" +
    "\004\032\146\001\002\000\004\017\147\001\002\000\044" +
    "\005\055\015\060\023\066\030\050\031\053\033\057\037" +
    "\051\040\047\041\067\042\054\043\046\044\065\045\062" +
    "\046\071\047\063\050\064\051\061\001\002\000\004\025" +
    "\151\001\002\000\004\004\152\001\002\000\012\057\uffc8" +
    "\060\uffc8\065\uffc8\066\uffc8\001\002\000\004\035\154\001" +
    "\002\000\004\017\155\001\002\000\044\005\055\015\060" +
    "\023\066\030\050\031\053\033\057\037\051\040\047\041" +
    "\067\042\054\043\046\044\065\045\062\046\071\047\063" +
    "\050\064\051\061\001\002\000\004\025\157\001\002\000" +
    "\004\004\160\001\002\000\012\057\uffc9\060\uffc9\065\uffc9" +
    "\066\uffc9\001\002\000\014\060\163\061\170\062\167\063" +
    "\165\064\164\001\002\000\004\057\230\001\002\000\004" +
    "\020\222\001\002\000\004\020\214\001\002\000\004\020" +
    "\206\001\002\000\016\057\uffd1\060\163\061\170\062\167" +
    "\063\165\064\164\001\002\000\004\020\177\001\002\000" +
    "\004\020\171\001\002\000\004\035\172\001\002\000\004" +
    "\017\173\001\002\000\044\005\055\015\060\023\066\030" +
    "\050\031\053\033\057\037\051\040\047\041\067\042\054" +
    "\043\046\044\065\045\062\046\071\047\063\050\064\051" +
    "\061\001\002\000\004\025\175\001\002\000\004\004\176" +
    "\001\002\000\016\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063" +
    "\uffc3\064\uffc3\001\002\000\004\032\200\001\002\000\004" +
    "\017\201\001\002\000\044\005\055\015\060\023\066\030" +
    "\050\031\053\033\057\037\051\040\047\041\067\042\054" +
    "\043\046\044\065\045\062\046\071\047\063\050\064\051" +
    "\061\001\002\000\004\025\203\001\002\000\004\004\204" +
    "\001\002\000\016\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063" +
    "\uffc2\064\uffc2\001\002\000\004\057\uffd2\001\002\000\004" +
    "\035\207\001\002\000\004\017\210\001\002\000\044\005" +
    "\055\015\060\023\066\030\050\031\053\033\057\037\051" +
    "\040\047\041\067\042\054\043\046\044\065\045\062\046" +
    "\071\047\063\050\064\051\061\001\002\000\004\025\212" +
    "\001\002\000\004\004\213\001\002\000\016\057\uffc5\060" +
    "\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\001\002\000\004" +
    "\035\215\001\002\000\004\017\216\001\002\000\044\005" +
    "\055\015\060\023\066\030\050\031\053\033\057\037\051" +
    "\040\047\041\067\042\054\043\046\044\065\045\062\046" +
    "\071\047\063\050\064\051\061\001\002\000\004\025\220" +
    "\001\002\000\004\004\221\001\002\000\016\057\uffc4\060" +
    "\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\001\002\000\004" +
    "\035\223\001\002\000\004\017\224\001\002\000\044\005" +
    "\055\015\060\023\066\030\050\031\053\033\057\037\051" +
    "\040\047\041\067\042\054\043\046\044\065\045\062\046" +
    "\071\047\063\050\064\051\061\001\002\000\004\025\226" +
    "\001\002\000\004\004\227\001\002\000\016\057\uffc6\060" +
    "\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\001\002\000\004" +
    "\055\231\001\002\000\004\025\232\001\002\000\004\004" +
    "\233\001\002\000\004\006\234\001\002\000\004\025\235" +
    "\001\002\000\004\004\236\001\002\000\022\025\uffd8\026" +
    "\uffd8\034\uffd8\036\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8" +
    "\001\002\000\006\027\241\052\240\001\002\000\004\017" +
    "\246\001\002\000\004\017\242\001\002\000\050\005\055" +
    "\013\uffe2\015\060\023\066\025\uffe2\030\050\031\053\033" +
    "\057\037\051\040\047\041\067\042\054\043\046\044\065" +
    "\045\062\046\071\047\063\050\064\051\061\001\002\000" +
    "\006\013\100\025\244\001\002\000\004\004\245\001\002" +
    "\000\022\025\ufff7\026\ufff7\034\ufff7\036\ufff7\053\ufff7\054" +
    "\ufff7\055\ufff7\056\ufff7\001\002\000\050\005\055\013\uffe2" +
    "\015\060\021\uffe2\023\066\030\050\031\053\033\057\037" +
    "\051\040\047\041\067\042\054\043\046\044\065\045\062" +
    "\046\071\047\063\050\064\051\061\001\002\000\006\013" +
    "\100\021\250\001\002\000\050\005\055\013\uffe2\015\060" +
    "\023\066\025\uffe2\030\050\031\053\033\057\037\051\040" +
    "\047\041\067\042\054\043\046\044\065\045\062\046\071" +
    "\047\063\050\064\051\061\001\002\000\006\013\100\025" +
    "\252\001\002\000\004\004\253\001\002\000\022\025\ufff6" +
    "\026\ufff6\034\ufff6\036\ufff6\053\ufff6\054\ufff6\055\ufff6\056" +
    "\ufff6\001\002\000\022\025\ufffd\026\ufffd\034\ufffd\036\ufffd" +
    "\053\ufffd\054\ufffd\055\ufffd\056\ufffd\001\002\000\010\031" +
    "\256\032\257\035\261\001\002\000\004\032\270\001\002" +
    "\000\004\020\uffe1\001\002\000\004\020\262\001\002\000" +
    "\004\020\uffe0\001\002\000\004\031\263\001\002\000\004" +
    "\022\264\001\002\000\044\005\055\015\060\023\066\030" +
    "\050\031\053\033\057\037\051\040\047\041\067\042\054" +
    "\043\046\044\065\045\062\046\071\047\063\050\064\051" +
    "\061\001\002\000\004\025\266\001\002\000\004\004\267" +
    "\001\002\000\022\025\ufff5\026\ufff5\034\ufff5\036\ufff5\053" +
    "\ufff5\054\ufff5\055\ufff5\056\ufff5\001\002\000\004\020\271" +
    "\001\002\000\014\037\051\040\047\041\067\042\054\043" +
    "\046\001\002\000\004\025\273\001\002\000\004\004\274" +
    "\001\002\000\022\025\ufff3\026\ufff3\034\ufff3\036\ufff3\053" +
    "\ufff3\054\ufff3\055\ufff3\056\ufff3\001\002\000\022\025\uffff" +
    "\026\uffff\034\uffff\036\uffff\053\uffff\054\uffff\055\uffff\056" +
    "\uffff\001\002\000\004\024\277\001\002\000\004\002\000" +
    "\001\002\000\006\060\301\065\302\001\002\000\004\020" +
    "\323\001\002\000\004\020\315\001\002\000\010\057\uffcf" +
    "\060\301\065\302\001\002\000\004\057\305\001\002\000" +
    "\004\056\306\001\002\000\004\025\307\001\002\000\004" +
    "\004\310\001\002\000\004\006\311\001\002\000\004\025" +
    "\312\001\002\000\004\004\313\001\002\000\022\025\uffd7" +
    "\026\uffd7\034\uffd7\036\uffd7\053\uffd7\054\uffd7\055\uffd7\056" +
    "\uffd7\001\002\000\004\057\uffd0\001\002\000\004\032\316" +
    "\001\002\000\004\017\317\001\002\000\044\005\055\015" +
    "\060\023\066\030\050\031\053\033\057\037\051\040\047" +
    "\041\067\042\054\043\046\044\065\045\062\046\071\047" +
    "\063\050\064\051\061\001\002\000\004\025\321\001\002" +
    "\000\004\004\322\001\002\000\010\057\uffc0\060\uffc0\065" +
    "\uffc0\001\002\000\004\035\324\001\002\000\004\017\325" +
    "\001\002\000\044\005\055\015\060\023\066\030\050\031" +
    "\053\033\057\037\051\040\047\041\067\042\054\043\046" +
    "\044\065\045\062\046\071\047\063\050\064\051\061\001" +
    "\002\000\004\025\327\001\002\000\004\004\330\001\002" +
    "\000\010\057\uffc1\060\uffc1\065\uffc1\001\002\000\014\060" +
    "\332\061\340\062\337\063\336\064\333\001\002\000\004" +
    "\020\u0101\001\002\000\004\020\373\001\002\000\004\057" +
    "\364\001\002\000\016\057\uffd5\060\332\061\340\062\337" +
    "\063\336\064\333\001\002\000\004\020\355\001\002\000" +
    "\004\020\347\001\002\000\004\020\341\001\002\000\004" +
    "\035\342\001\002\000\004\017\343\001\002\000\044\005" +
    "\055\015\060\023\066\030\050\031\053\033\057\037\051" +
    "\040\047\041\067\042\054\043\046\044\065\045\062\046" +
    "\071\047\063\050\064\051\061\001\002\000\004\025\345" +
    "\001\002\000\004\004\346\001\002\000\016\057\uffcb\060" +
    "\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\001\002\000\004" +
    "\032\350\001\002\000\004\017\351\001\002\000\044\005" +
    "\055\015\060\023\066\030\050\031\053\033\057\037\051" +
    "\040\047\041\067\042\054\043\046\044\065\045\062\046" +
    "\071\047\063\050\064\051\061\001\002\000\004\025\353" +
    "\001\002\000\004\004\354\001\002\000\016\057\uffca\060" +
    "\uffca\061\uffca\062\uffca\063\uffca\064\uffca\001\002\000\004" +
    "\035\356\001\002\000\004\017\357\001\002\000\044\005" +
    "\055\015\060\023\066\030\050\031\053\033\057\037\051" +
    "\040\047\041\067\042\054\043\046\044\065\045\062\046" +
    "\071\047\063\050\064\051\061\001\002\000\004\025\361" +
    "\001\002\000\004\004\362\001\002\000\016\057\uffcd\060" +
    "\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\001\002\000\004" +
    "\057\uffd6\001\002\000\004\053\365\001\002\000\004\025" +
    "\366\001\002\000\004\004\367\001\002\000\004\006\370" +
    "\001\002\000\004\025\371\001\002\000\004\004\372\001" +
    "\002\000\022\025\uffda\026\uffda\034\uffda\036\uffda\053\uffda" +
    "\054\uffda\055\uffda\056\uffda\001\002\000\004\035\374\001" +
    "\002\000\004\017\375\001\002\000\044\005\055\015\060" +
    "\023\066\030\050\031\053\033\057\037\051\040\047\041" +
    "\067\042\054\043\046\044\065\045\062\046\071\047\063" +
    "\050\064\051\061\001\002\000\004\025\377\001\002\000" +
    "\004\004\u0100\001\002\000\016\057\uffcc\060\uffcc\061\uffcc" +
    "\062\uffcc\063\uffcc\064\uffcc\001\002\000\004\035\u0102\001" +
    "\002\000\004\017\u0103\001\002\000\044\005\055\015\060" +
    "\023\066\030\050\031\053\033\057\037\051\040\047\041" +
    "\067\042\054\043\046\044\065\045\062\046\071\047\063" +
    "\050\064\051\061\001\002\000\004\025\u0105\001\002\000" +
    "\004\004\u0106\001\002\000\016\057\uffce\060\uffce\061\uffce" +
    "\062\uffce\063\uffce\064\uffce\001\002\000\006\032\257\035" +
    "\261\001\002\000\004\020\u0109\001\002\000\004\023\u010a" +
    "\001\002\000\004\031\u010b\001\002\000\004\022\u010c\001" +
    "\002\000\004\015\u010d\001\002\000\050\005\055\013\uffe2" +
    "\015\060\016\uffe2\023\066\030\050\031\053\033\057\037" +
    "\051\040\047\041\067\042\054\043\046\044\065\045\062" +
    "\046\071\047\063\050\064\051\061\001\002\000\006\013" +
    "\100\016\u010f\001\002\000\004\025\u0110\001\002\000\004" +
    "\004\u0111\001\002\000\022\025\ufff4\026\ufff4\034\ufff4\036" +
    "\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\004\002\003\001\001\000\002\001\001\000" +
    "\020\003\011\004\017\005\013\011\016\012\014\013\006" +
    "\016\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\004\274\005\013" +
    "\011\016\012\014\013\006\016\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\031\024\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\031" +
    "\024\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\051\014\067\015\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\124\014\067\015\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\076" +
    "\007\122\014\067\015\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\072\014\067\015\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\076\007\075\014\067\015\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\101\014\067\015\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\104\014\067\015\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\107\014\067\015\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\112\014\067\015\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\115\014\067\015\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\120\014\067" +
    "\015\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\076\007\127\014\067\015\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\076\007\134\014\067\015" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\076\007\137\014\067\015\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\076\007\142\014\067" +
    "\015\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\147\014\067" +
    "\015\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\155\014\067\015\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\165\025\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\165\025\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\173\014\067\015\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\201\014\067" +
    "\015\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\210\014\067\015\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\216\014\067\015" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\224\014\067\015\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\076\007\242" +
    "\014\067\015\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\076\007\246\014\067" +
    "\015\055\001\001\000\002\001\001\000\012\006\076\007" +
    "\250\014\067\015\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\257\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\264\014\067\015\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\271\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\302\026\303\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\302\026" +
    "\313\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\317\014" +
    "\067\015\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\325\014\067\015\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\334\023" +
    "\333\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\334\023\362\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\343\014\067\015\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\351\014" +
    "\067\015\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\357\014\067\015\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\375" +
    "\014\067\015\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\u0103\014\067\015\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\u0107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\076" +
    "\007\u010d\014\067\015\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


   

    //clases, objetos, variables, listas, etc.
    Variable vari = new Variable();
    Aritmetica Ari = new Aritmetica();
    Estadistica Est = new Estadistica();
    Imprimir imp = new Imprimir();

    public ArrayList<Object> grB = new ArrayList<Object>();
    public ArrayList<Object> grP = new ArrayList<Object>();
    public ArrayList<Object> grL = new ArrayList<Object>();
    public ArrayList<Object> gH = new ArrayList<Object>();

    public GraficaBarras grb = new GraficaBarras();
    public GraficaPie grp = new GraficaPie();;
    public GraficaLine grl = new GraficaLine();
    public DataHistograma dh = new DataHistograma();


    // salida consola
    public List<String> salidas = new ArrayList<String>();

    public ArrayList<TablaInfo> tabla = new ArrayList<TablaInfo>();
    // errores
    public ArrayList<Excepcion> Errores = new ArrayList();

    // Método al que se llama automáticamente ante algún error sintáctico.
    public void syntax_error(Symbol s){ 
        Errores.add(new Excepcion("Sintáctico", "Error de sintaxis detectado. Se detectó: " + s.value, s.left + "", s.right + ""));
    } 

    // Método al que se llama automáticamente ante algún error sintáctico, en el que ya no es posible una recuperación de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error sintactico irrecuperable en la Linea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }

    public ArrayList<Excepcion> getErrores(){
        return Errores;
    }

    public ArrayList<TablaInfo> getTabla(){
        return tabla;
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= PROGRAM declaraciones END PROGRAM 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaraciones ::= declaraciones declaracion 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= declaracion 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= error PTCOMA 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion ::= imprimir 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion ::= declaracion_variable 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= declaracion_arreglo 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= op_aritmetica 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= funcion_graficacion 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // imprimir ::= CONSOLE ACCESO PRINT ASIGNACION expresiones END PTCOMA 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = exp; salidas.add(exp); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("imprimir",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // imprimir ::= CONSOLE ACCESO COLUMN ASIGNACION expresiones ASIGNA expresiones END PTCOMA 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 salidas.add(imp.imprimirValores(id, exp)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("imprimir",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion_variable ::= VAR DOS_PT tipo_dato ACCESO ID INICIALIZACION expresion END PTCOMA 
            {
              String RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 vari.asignar(id , exp);  
    tabla.add(new TablaInfo(id, dato, exp , 0, 0));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_variable",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion_arreglo ::= ARR DOS_PT tipo_dato ACCESO ARROBA ID INICIALIZACION COR_IZQ expresiones COR_DER END PTCOMA 
            {
              String RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 vari.asignar(id , exp); 
    tabla.add(new TablaInfo(id, dato, exp , 0, 0));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // op_aritmetica ::= VAR DOS_PT ID DOUBLE ACCESO operacion END PTCOMA 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = exp;  vari.asignar(id , exp); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetica",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // funcion_estadistica ::= MEDIA PAR_IZQ expresion PAR_DER 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = Est.operacionEstadistica(exp, "media");    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funcion_estadistica ::= MEDIANA PAR_IZQ expresion PAR_DER 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = Est.operacionEstadistica(exp, "mediana");  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcion_estadistica ::= MODA PAR_IZQ expresion PAR_DER 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = Est.operacionEstadistica(exp, "moda");     
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funcion_estadistica ::= VARIANZA PAR_IZQ expresion PAR_DER 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = Est.operacionEstadistica(exp, "varianza"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funcion_estadistica ::= MAX PAR_IZQ expresion PAR_DER 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = Est.operacionEstadistica(exp, "max");      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funcion_estadistica ::= MIN PAR_IZQ expresion PAR_DER 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = Est.operacionEstadistica(exp, "min");      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= operacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;                         
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = vari.obtener(id);          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= CADENA 
            {
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = str.replace("\"", "");     
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= NUMERO 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = num;                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= PAR_IZQ expresion PAR_DER 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = exp;                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion ::= funcion_estadistica 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;                         
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion ::= COR_IZQ expresiones COR_DER 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = exp;                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion ::= ARROBA ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = vari.obtener(id);          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresiones ::= expresion 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = b;     
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresiones ::= expresiones COMA expresion 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = b + "," + e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresiones ::= 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo_dato ::= DOUBLE 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "variable double"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipo_dato ::= CHAR_ARRAY 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "variable string"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operacion ::= SUM PAR_IZQ expresiones PAR_DER 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = Ari.realizarOperacion(b, "SUM"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operacion ::= RES PAR_IZQ expresiones PAR_DER 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = Ari.realizarOperacion(b, "RES"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operacion ::= MUL PAR_IZQ expresiones PAR_DER 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = Ari.realizarOperacion(b, "MUL"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operacion ::= DIV PAR_IZQ expresiones PAR_DER 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = Ari.realizarOperacion(b, "DIV"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operacion ::= MOD PAR_IZQ expresiones PAR_DER 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = Ari.realizarOperacion(b, "MOD"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // funcion_graficacion ::= BAR PAR_IZQ graficaBarras EXEC BAR END PTCOMA PAR_DER END PTCOMA 
            {
              String RESULT =null;
		 grb.build(); grB.add(grb); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion_graficacion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // funcion_graficacion ::= PIE PAR_IZQ graficaPie EXEC PIE END PTCOMA PAR_DER END PTCOMA 
            {
              String RESULT =null;
		 grp.build(); grP.add(grp); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion_graficacion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // funcion_graficacion ::= LINE PAR_IZQ graficaLine EXEC LINE END PTCOMA PAR_DER END PTCOMA 
            {
              String RESULT =null;
		 grl.build(); grL.add(grl); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion_graficacion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // funcion_graficacion ::= HISTOGRAM PAR_IZQ datosHistogram EXEC HISTOGRAM END PTCOMA PAR_DER END PTCOMA 
            {
              String RESULT =null;
		 dh.build(); salidas.add(dh.calcularFrecuencia()); gH.add(dh.datosHistograma()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion_graficacion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // graficaBarras ::= atributos_bar graficaBarras 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficaBarras",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // graficaBarras ::= atributos_bar 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficaBarras",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // graficaPie ::= atributos_pie graficaPie 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficaPie",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // graficaPie ::= atributos_pie 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficaPie",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // graficaLine ::= atributos_line graficaLine 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficaLine",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // graficaLine ::= atributos_line 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficaLine",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // datosHistogram ::= atributos_histogram datosHistogram 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosHistogram",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // datosHistogram ::= atributos_histogram 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosHistogram",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // atributos_bar ::= TITULO ACCESO CHAR_ARRAY ASIGNACION expresion END PTCOMA 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 grb.setTitulo(exp);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributos_bar",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // atributos_bar ::= TITULOX ACCESO CHAR_ARRAY ASIGNACION expresion END PTCOMA 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 grb.setTituloX(exp); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributos_bar",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // atributos_bar ::= TITULOY ACCESO CHAR_ARRAY ASIGNACION expresion END PTCOMA 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 grb.setTituloY(exp); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributos_bar",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // atributos_bar ::= X ACCESO CHAR_ARRAY ASIGNACION expresion END PTCOMA 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 grb.setEjeX(exp);    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributos_bar",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // atributos_bar ::= Y ACCESO DOUBLE ASIGNACION expresion END PTCOMA 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 grb.setEjeY(exp);    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributos_bar",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // atributos_pie ::= TITULO ACCESO CHAR_ARRAY ASIGNACION expresion END PTCOMA 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 grp.setTitulo(exp);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributos_pie",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // atributos_pie ::= VALUES ACCESO DOUBLE ASIGNACION expresion END PTCOMA 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 grp.setValues(exp);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributos_pie",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // atributos_pie ::= LABEL ACCESO CHAR_ARRAY ASIGNACION expresion END PTCOMA 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 grp.setLabel(exp);   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributos_pie",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // atributos_line ::= TITULO ACCESO CHAR_ARRAY ASIGNACION expresion END PTCOMA 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 grl.setTitulo(exp);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributos_line",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // atributos_line ::= TITULOX ACCESO CHAR_ARRAY ASIGNACION expresion END PTCOMA 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 grl.setTituloX(exp); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributos_line",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // atributos_line ::= TITULOY ACCESO CHAR_ARRAY ASIGNACION expresion END PTCOMA 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 grl.setTituloY(exp); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributos_line",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // atributos_line ::= X ACCESO CHAR_ARRAY ASIGNACION expresion END PTCOMA 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 grl.setEjeX(exp);    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributos_line",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // atributos_line ::= Y ACCESO DOUBLE ASIGNACION expresion END PTCOMA 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 grl.setEjeY(exp);    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributos_line",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // atributos_histogram ::= TITULO ACCESO CHAR_ARRAY ASIGNACION expresion END PTCOMA 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 dh.setTitulo(exp);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributos_histogram",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // atributos_histogram ::= VALUES ACCESO DOUBLE ASIGNACION expresion END PTCOMA 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 dh.setValues(exp);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributos_histogram",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
