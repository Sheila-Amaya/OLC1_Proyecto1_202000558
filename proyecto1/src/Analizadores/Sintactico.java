
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.stream.Collectors;
import java.util.ArrayList;
import java.util.List;
import Errores.Excepcion;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\006\000\002\003" +
    "\004\000\002\003\003\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\005\011\000\002\005\013\000\002" +
    "\011\013\000\002\012\016\000\002\013\012\000\002\015" +
    "\006\000\002\015\006\000\002\015\006\000\002\015\006" +
    "\000\002\015\006\000\002\015\006\000\002\016\014\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\020\003\000\002\021\011\000\002\021" +
    "\010\000\002\021\010\000\002\021\011\000\002\021\011" +
    "\000\002\021\011\000\002\021\011\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\005\000\002\006\003\000\002\006\005\000\002\006" +
    "\004\000\002\007\003\000\002\007\005\000\002\010\003" +
    "\000\002\010\003\000\002\014\006\000\002\014\006\000" +
    "\002\014\006\000\002\014\006\000\002\014\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\004\024\005\001\002\000\004\002\266\001" +
    "\002\000\022\003\022\026\023\034\017\036\006\053\011" +
    "\054\025\055\024\056\012\001\002\000\004\012\253\001" +
    "\002\000\004\005\162\001\002\000\022\025\ufff9\026\ufff9" +
    "\034\ufff9\036\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\001" +
    "\002\000\006\005\uffeb\025\uffeb\001\002\000\006\005\uffe8" +
    "\025\uffe8\001\002\000\022\025\160\026\023\034\017\036" +
    "\006\053\011\054\025\055\024\056\012\001\002\000\022" +
    "\025\ufff8\026\ufff8\034\ufff8\036\ufff8\053\ufff8\054\ufff8\055" +
    "\ufff8\056\ufff8\001\002\000\022\025\ufffc\026\ufffc\034\ufffc" +
    "\036\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\001\002\000" +
    "\022\025\ufffa\026\ufffa\034\ufffa\036\ufffa\053\ufffa\054\ufffa" +
    "\055\ufffa\056\ufffa\001\002\000\004\012\137\001\002\000" +
    "\022\025\ufffb\026\ufffb\034\ufffb\036\ufffb\053\ufffb\054\ufffb" +
    "\055\ufffb\056\ufffb\001\002\000\022\025\ufffe\026\ufffe\034" +
    "\ufffe\036\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\001\002" +
    "\000\022\025\ufffd\026\ufffd\034\ufffd\036\ufffd\053\ufffd\054" +
    "\ufffd\055\ufffd\056\ufffd\001\002\000\004\020\026\001\002" +
    "\000\006\005\uffe9\025\uffe9\001\002\000\006\005\uffea\025" +
    "\uffea\001\002\000\006\027\030\052\027\001\002\000\004" +
    "\017\131\001\002\000\004\017\031\001\002\000\044\005" +
    "\042\015\046\023\053\030\035\031\040\033\044\037\036" +
    "\040\034\041\054\042\041\043\033\044\052\045\047\046" +
    "\055\047\050\050\051\051\045\001\002\000\006\013\064" +
    "\025\127\001\002\000\004\005\124\001\002\000\004\005" +
    "\121\001\002\000\014\006\uffdd\013\uffdd\016\uffdd\021\uffdd" +
    "\025\uffdd\001\002\000\004\005\116\001\002\000\014\006" +
    "\uffd7\013\uffd7\016\uffd7\021\uffd7\025\uffd7\001\002\000\014" +
    "\006\uffde\013\uffde\016\uffde\021\uffde\025\uffde\001\002\000" +
    "\004\005\113\001\002\000\044\005\042\015\046\023\053" +
    "\030\035\031\040\033\044\037\036\040\034\041\054\042" +
    "\041\043\033\044\052\045\047\046\055\047\050\050\051" +
    "\051\045\001\002\000\014\006\uffda\013\uffda\016\uffda\021" +
    "\uffda\025\uffda\001\002\000\014\006\uffdc\013\uffdc\016\uffdc" +
    "\021\uffdc\025\uffdc\001\002\000\004\005\106\001\002\000" +
    "\044\005\042\015\046\023\053\030\035\031\040\033\044" +
    "\037\036\040\034\041\054\042\041\043\033\044\052\045" +
    "\047\046\055\047\050\050\051\051\045\001\002\000\004" +
    "\005\101\001\002\000\004\005\076\001\002\000\004\005" +
    "\073\001\002\000\004\005\070\001\002\000\004\031\067" +
    "\001\002\000\004\005\062\001\002\000\004\005\057\001" +
    "\002\000\014\006\uffdf\013\uffdf\016\uffdf\021\uffdf\025\uffdf" +
    "\001\002\000\044\005\042\015\046\023\053\030\035\031" +
    "\040\033\044\037\036\040\034\041\054\042\041\043\033" +
    "\044\052\045\047\046\055\047\050\050\051\051\045\001" +
    "\002\000\004\006\061\001\002\000\014\006\ufff0\013\ufff0" +
    "\016\ufff0\021\ufff0\025\ufff0\001\002\000\044\005\042\015" +
    "\046\023\053\030\035\031\040\033\044\037\036\040\034" +
    "\041\054\042\041\043\033\044\052\045\047\046\055\047" +
    "\050\050\051\051\045\001\002\000\006\006\065\013\064" +
    "\001\002\000\044\005\042\015\046\023\053\030\035\031" +
    "\040\033\044\037\036\040\034\041\054\042\041\043\033" +
    "\044\052\045\047\046\055\047\050\050\051\051\045\001" +
    "\002\000\014\006\uffd1\013\uffd1\016\uffd1\021\uffd1\025\uffd1" +
    "\001\002\000\014\006\uffd6\013\uffd6\016\uffd6\021\uffd6\025" +
    "\uffd6\001\002\000\014\006\uffd8\013\uffd8\016\uffd8\021\uffd8" +
    "\025\uffd8\001\002\000\044\005\042\015\046\023\053\030" +
    "\035\031\040\033\044\037\036\040\034\041\054\042\041" +
    "\043\033\044\052\045\047\046\055\047\050\050\051\051" +
    "\045\001\002\000\004\006\072\001\002\000\014\006\ufff2" +
    "\013\ufff2\016\ufff2\021\ufff2\025\ufff2\001\002\000\044\005" +
    "\042\015\046\023\053\030\035\031\040\033\044\037\036" +
    "\040\034\041\054\042\041\043\033\044\052\045\047\046" +
    "\055\047\050\050\051\051\045\001\002\000\004\006\075" +
    "\001\002\000\014\006\uffee\013\uffee\016\uffee\021\uffee\025" +
    "\uffee\001\002\000\044\005\042\015\046\023\053\030\035" +
    "\031\040\033\044\037\036\040\034\041\054\042\041\043" +
    "\033\044\052\045\047\046\055\047\050\050\051\051\045" +
    "\001\002\000\004\006\100\001\002\000\014\006\uffef\013" +
    "\uffef\016\uffef\021\uffef\025\uffef\001\002\000\044\005\042" +
    "\015\046\023\053\030\035\031\040\033\044\037\036\040" +
    "\034\041\054\042\041\043\033\044\052\045\047\046\055" +
    "\047\050\050\051\051\045\001\002\000\004\006\103\001" +
    "\002\000\014\006\ufff1\013\ufff1\016\ufff1\021\ufff1\025\ufff1" +
    "\001\002\000\006\013\064\016\105\001\002\000\014\006" +
    "\uffd9\013\uffd9\016\uffd9\021\uffd9\025\uffd9\001\002\000\044" +
    "\005\042\015\046\023\053\030\035\031\040\033\044\037" +
    "\036\040\034\041\054\042\041\043\033\044\052\045\047" +
    "\046\055\047\050\050\051\051\045\001\002\000\004\006" +
    "\110\001\002\000\014\006\uffed\013\uffed\016\uffed\021\uffed" +
    "\025\uffed\001\002\000\004\006\112\001\002\000\014\006" +
    "\uffdb\013\uffdb\016\uffdb\021\uffdb\025\uffdb\001\002\000\044" +
    "\005\042\015\046\023\053\030\035\031\040\033\044\037" +
    "\036\040\034\041\054\042\041\043\033\044\052\045\047" +
    "\046\055\047\050\050\051\051\045\001\002\000\006\006" +
    "\115\013\064\001\002\000\014\006\uffd0\013\uffd0\016\uffd0" +
    "\021\uffd0\025\uffd0\001\002\000\044\005\042\015\046\023" +
    "\053\030\035\031\040\033\044\037\036\040\034\041\054" +
    "\042\041\043\033\044\052\045\047\046\055\047\050\050" +
    "\051\051\045\001\002\000\006\006\120\013\064\001\002" +
    "\000\014\006\uffd3\013\uffd3\016\uffd3\021\uffd3\025\uffd3\001" +
    "\002\000\044\005\042\015\046\023\053\030\035\031\040" +
    "\033\044\037\036\040\034\041\054\042\041\043\033\044" +
    "\052\045\047\046\055\047\050\050\051\051\045\001\002" +
    "\000\006\006\123\013\064\001\002\000\014\006\uffd2\013" +
    "\uffd2\016\uffd2\021\uffd2\025\uffd2\001\002\000\044\005\042" +
    "\015\046\023\053\030\035\031\040\033\044\037\036\040" +
    "\034\041\054\042\041\043\033\044\052\045\047\046\055" +
    "\047\050\050\051\051\045\001\002\000\006\006\126\013" +
    "\064\001\002\000\014\006\uffcf\013\uffcf\016\uffcf\021\uffcf" +
    "\025\uffcf\001\002\000\004\004\130\001\002\000\022\025" +
    "\ufff7\026\ufff7\034\ufff7\036\ufff7\053\ufff7\054\ufff7\055\ufff7" +
    "\056\ufff7\001\002\000\044\005\042\015\046\023\053\030" +
    "\035\031\040\033\044\037\036\040\034\041\054\042\041" +
    "\043\033\044\052\045\047\046\055\047\050\050\051\051" +
    "\045\001\002\000\006\013\064\021\133\001\002\000\044" +
    "\005\042\015\046\023\053\030\035\031\040\033\044\037" +
    "\036\040\034\041\054\042\041\043\033\044\052\045\047" +
    "\046\055\047\050\050\051\051\045\001\002\000\006\013" +
    "\064\025\135\001\002\000\004\004\136\001\002\000\022" +
    "\025\ufff6\026\ufff6\034\ufff6\036\ufff6\053\ufff6\054\ufff6\055" +
    "\ufff6\056\ufff6\001\002\000\010\031\140\032\141\035\143" +
    "\001\002\000\004\032\152\001\002\000\050\005\uffd5\015" +
    "\uffd5\017\uffd5\020\uffd5\023\uffd5\030\uffd5\031\uffd5\033\uffd5" +
    "\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045" +
    "\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\001\002\000\004" +
    "\020\144\001\002\000\050\005\uffd4\015\uffd4\017\uffd4\020" +
    "\uffd4\023\uffd4\030\uffd4\031\uffd4\033\uffd4\037\uffd4\040\uffd4" +
    "\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047" +
    "\uffd4\050\uffd4\051\uffd4\001\002\000\004\031\145\001\002" +
    "\000\004\022\146\001\002\000\044\005\042\015\046\023" +
    "\053\030\035\031\040\033\044\037\036\040\034\041\054" +
    "\042\041\043\033\044\052\045\047\046\055\047\050\050" +
    "\051\051\045\001\002\000\004\025\150\001\002\000\004" +
    "\004\151\001\002\000\022\025\ufff5\026\ufff5\034\ufff5\036" +
    "\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\001\002\000\004" +
    "\020\153\001\002\000\014\037\036\040\034\041\054\042" +
    "\041\043\033\001\002\000\004\025\155\001\002\000\004" +
    "\004\156\001\002\000\022\025\ufff3\026\ufff3\034\ufff3\036" +
    "\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3\001\002\000\022" +
    "\025\uffff\026\uffff\034\uffff\036\uffff\053\uffff\054\uffff\055" +
    "\uffff\056\uffff\001\002\000\004\024\161\001\002\000\004" +
    "\002\000\001\002\000\020\060\165\061\164\062\163\063" +
    "\170\064\167\065\171\066\166\001\002\000\004\020\246" +
    "\001\002\000\004\020\241\001\002\000\004\020\233\001" +
    "\002\000\004\020\225\001\002\000\004\020\217\001\002" +
    "\000\004\020\211\001\002\000\004\020\203\001\002\000" +
    "\004\057\uffe7\001\002\000\004\057\174\001\002\000\012" +
    "\053\011\054\025\055\024\056\012\001\002\000\004\025" +
    "\176\001\002\000\004\004\177\001\002\000\004\006\200" +
    "\001\002\000\004\025\201\001\002\000\004\004\202\001" +
    "\002\000\022\025\uffec\026\uffec\034\uffec\036\uffec\053\uffec" +
    "\054\uffec\055\uffec\056\uffec\001\002\000\006\032\141\035" +
    "\143\001\002\000\004\017\205\001\002\000\044\005\042" +
    "\015\046\023\053\030\035\031\040\033\044\037\036\040" +
    "\034\041\054\042\041\043\033\044\052\045\047\046\055" +
    "\047\050\050\051\051\045\001\002\000\004\025\207\001" +
    "\002\000\004\004\210\001\002\000\004\057\uffe0\001\002" +
    "\000\006\032\141\035\143\001\002\000\004\017\213\001" +
    "\002\000\004\030\214\001\002\000\004\025\215\001\002" +
    "\000\004\004\216\001\002\000\004\057\uffe3\001\002\000" +
    "\006\032\141\035\143\001\002\000\004\017\221\001\002" +
    "\000\004\030\222\001\002\000\004\025\223\001\002\000" +
    "\004\004\224\001\002\000\004\057\uffe2\001\002\000\006" +
    "\032\141\035\143\001\002\000\004\017\227\001\002\000" +
    "\044\005\042\015\046\023\053\030\035\031\040\033\044" +
    "\037\036\040\034\041\054\042\041\043\033\044\052\045" +
    "\047\046\055\047\050\050\051\051\045\001\002\000\004" +
    "\025\231\001\002\000\004\004\232\001\002\000\004\057" +
    "\uffe1\001\002\000\006\032\141\035\143\001\002\000\004" +
    "\017\235\001\002\000\004\030\236\001\002\000\004\025" +
    "\237\001\002\000\004\004\240\001\002\000\004\057\uffe6" +
    "\001\002\000\006\032\141\035\143\001\002\000\044\005" +
    "\042\015\046\023\053\030\035\031\040\033\044\037\036" +
    "\040\034\041\054\042\041\043\033\044\052\045\047\046" +
    "\055\047\050\050\051\051\045\001\002\000\004\025\244" +
    "\001\002\000\004\004\245\001\002\000\004\057\uffe5\001" +
    "\002\000\006\032\141\035\143\001\002\000\044\005\042" +
    "\015\046\023\053\030\035\031\040\033\044\037\036\040" +
    "\034\041\054\042\041\043\033\044\052\045\047\046\055" +
    "\047\050\050\051\051\045\001\002\000\004\025\251\001" +
    "\002\000\004\004\252\001\002\000\004\057\uffe4\001\002" +
    "\000\006\032\141\035\143\001\002\000\004\020\255\001" +
    "\002\000\004\023\256\001\002\000\004\031\257\001\002" +
    "\000\004\022\260\001\002\000\004\015\261\001\002\000" +
    "\044\005\042\015\046\023\053\030\035\031\040\033\044" +
    "\037\036\040\034\041\054\042\041\043\033\044\052\045" +
    "\047\046\055\047\050\050\051\051\045\001\002\000\006" +
    "\013\064\016\263\001\002\000\004\025\264\001\002\000" +
    "\004\004\265\001\002\000\022\025\ufff4\026\ufff4\034\ufff4" +
    "\036\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\004\002\003\001\001\000\002\001\001\000" +
    "\022\003\012\004\020\005\014\011\017\012\015\013\007" +
    "\016\013\017\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\156\005\014\011\017\012\015\013\007\016" +
    "\013\017\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\036\007\031\014\055" +
    "\015\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\110\014\055\015\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\036\007\103\014" +
    "\055\015\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\057\014\055\015\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\036\007\062\014\055\015\042" +
    "\001\001\000\002\001\001\000\010\006\065\014\055\015" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\070\014\055\015\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\073\014\055" +
    "\015\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\076\014\055\015\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\101\014\055\015\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\106\014\055\015\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\036\007\113\014\055\015" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\036\007\116\014\055\015\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\036\007\121\014\055" +
    "\015\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\036\007\124\014\055\015\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\036\007\131\014\055\015\042\001\001" +
    "\000\002\001\001\000\012\006\036\007\133\014\055\015" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\146\014\055\015" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\172\021\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\203\001\001\000" +
    "\002\001\001\000\010\006\205\014\055\015\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\217\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\225\001\001\000\002\001\001\000\010\006\227" +
    "\014\055\015\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\233\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\241\001\001\000\010" +
    "\006\242\014\055\015\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\246\001\001" +
    "\000\010\006\247\014\055\015\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\253" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\036" +
    "\007\261\014\055\015\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    // clases, objetos, variables, listas, etc.
    public List<String> salidas = new ArrayList<String>();

    // errores
    public ArrayList<Excepcion> Errores = new ArrayList();

    // Método al que se llama automáticamente ante algún error sintáctico.
    public void syntax_error(Symbol s){ 
        Errores.add(new Excepcion("Sintáctico", "Error de sintaxis detectado. Se detectó: " + s.value, s.left + "", s.right + ""));
    } 

    // Método al que se llama automáticamente ante algún error sintáctico
    // en el que ya no es posible una recuperación de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error sintactico irrecuperable en la Linea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }

    public ArrayList<Excepcion> getErrores(){
        return Errores;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= PROGRAM declaraciones END PROGRAM 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaraciones ::= declaraciones declaracion 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= declaracion 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= error 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion ::= imprimir 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion ::= declaracion_variable 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= declaracion_arreglo 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= op_aritmetica 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= funcion_graficacion 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // imprimir ::= CONSOLE ACCESO PRINT ASIGNACION expresiones END PTCOMA 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("imprimir",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // imprimir ::= CONSOLE ACCESO COLUMN ASIGNACION expresiones ASIGNA expresiones END PTCOMA 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("imprimir",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion_variable ::= VAR DOS_PT tipo_dato ACCESO ID INICIALIZACION expresion END PTCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_variable",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion_arreglo ::= ARR DOS_PT tipo_dato ACCESO ARROBA ID INICIALIZACION COR_IZQ expresiones COR_DER END PTCOMA 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 RESULT = b; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // op_aritmetica ::= VAR DOS_PT ID DOUBLE ACCESO operacion END PTCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetica",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // funcion_estadistica ::= MEDIA PAR_IZQ expresion PAR_DER 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funcion_estadistica ::= MEDIANA PAR_IZQ expresion PAR_DER 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcion_estadistica ::= MODA PAR_IZQ expresion PAR_DER 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funcion_estadistica ::= VARIANZA PAR_IZQ expresion PAR_DER 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funcion_estadistica ::= MAX PAR_IZQ expresion PAR_DER 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funcion_estadistica ::= MIN PAR_IZQ expresion PAR_DER 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // funcion_graficacion ::= tipo_grafica PAR_IZQ atributos_grafica EXEC tipo_grafica END PTCOMA PAR_DER END PTCOMA 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion_graficacion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo_grafica ::= BAR 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_grafica",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo_grafica ::= PIE 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_grafica",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo_grafica ::= LINE 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_grafica",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo_grafica ::= HISTOGRAM 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_grafica",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // atributos_grafica ::= atributos 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributos_grafica",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // atributos ::= TITULO ACCESO tipo_dato ASIGNACION CADENA END PTCOMA 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributos",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // atributos ::= X ACCESO tipo_dato expresion END PTCOMA 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributos",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // atributos ::= Y ACCESO tipo_dato expresion END PTCOMA 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributos",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // atributos ::= TITULOX ACCESO tipo_dato ASIGNACION CADENA END PTCOMA 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributos",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // atributos ::= TITULOY ACCESO tipo_dato ASIGNACION CADENA END PTCOMA 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributos",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // atributos ::= LABEL ACCESO tipo_dato ASIGNACION expresion END PTCOMA 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributos",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // atributos ::= VALUES ACCESO tipo_dato ASIGNACION expresion END PTCOMA 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributos",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= operacion 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= CADENA 
            {
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = str;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= NUMERO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= PAR_IZQ expresion PAR_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= funcion_estadistica 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= COR_IZQ expresiones COR_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= ARROBA ID 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresiones ::= expresion 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresiones ::= expresiones COMA expresion 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = b + ", " + e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipo_dato ::= DOUBLE 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = d; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipo_dato ::= CHAR_ARRAY 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = c; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operacion ::= SUM PAR_IZQ expresiones PAR_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operacion ::= RES PAR_IZQ expresiones PAR_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operacion ::= MUL PAR_IZQ expresiones PAR_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operacion ::= DIV PAR_IZQ expresiones PAR_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operacion ::= MOD PAR_IZQ expresiones PAR_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
